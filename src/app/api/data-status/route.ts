import { NextRequest, NextResponse } from 'next/server'
import { getAllCourses as getBlobCourses } from '@/lib/blob-storage'
import { createConnection } from '@/lib/postgres'

export async function GET(request: NextRequest) {
	try {
		const status = {
			blob: { available: false, courses: 0, error: null as any },
			postgres: { available: false, courses: 0, error: null as any },
			recommendations: [] as string[],
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º Blob storage
		try {
			if (process.env.BLOB_READ_WRITE_TOKEN) {
				const blobCourses = await getBlobCourses()
				status.blob.available = true
				status.blob.courses = blobCourses.length
			} else {
				status.blob.error = 'BLOB_READ_WRITE_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Blob storage:', error)
			status.blob.error = error
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
		try {
			if (process.env.POSTGRES_URL) {
				const sql = createConnection()
				const { rows } = await sql`SELECT COUNT(*) as count FROM courses`
				status.postgres.available = true
				status.postgres.courses = parseInt(rows[0].count)
			} else {
				status.postgres.error = 'POSTGRES_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ PostgreSQL:', error)
			status.postgres.error = error
		}

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
		if (!status.blob.available && !status.postgres.available) {
			status.recommendations.push(
				'‚ùå –ù–∏ –æ–¥–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.'
			)
		}

		if (status.blob.available && status.blob.courses === 0) {
			status.recommendations.push(
				'üîµ Blob storage –ø—É—Å—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.'
			)
		}

		if (status.postgres.available && status.postgres.courses === 0) {
			status.recommendations.push(
				'üü¢ PostgreSQL –ø—É—Å—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.'
			)
		}

		if (status.blob.courses > 0 && status.postgres.courses > 0) {
			status.recommendations.push('‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –æ–±–µ–∏—Ö –±–∞–∑–∞—Ö.')
		} else if (status.blob.courses > 0 || status.postgres.courses > 0) {
			status.recommendations.push(
				'‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π –±–∞–∑–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è.'
			)
		}

		if (status.blob.courses === 0 && status.postgres.courses === 0) {
			status.recommendations.push('üö® –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö!')
		}

		return NextResponse.json({
			success: true,
			status,
			timestamp: new Date().toISOString(),
			needsMigration:
				status.blob.courses === 0 && status.postgres.courses === 0,
		})
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–∞–Ω–Ω—ã—Ö:', error)
		return NextResponse.json(
			{
				success: false,
				error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
				details: error,
			},
			{ status: 500 }
		)
	}
}
